{"version":3,"sources":["logo.svg","Component/ContentLayout.js","Component/Footer.js","Component/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ContentLayout","className","Component","Footer","Header","to","href","target","exact","path","route","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,4OCa5BC,E,iLATP,OACA,yBAAKC,UAAU,qBACX,oD,GAJgBC,aCSbC,E,iLAPP,OACA,yBAAKF,UAAU,mB,GAHFC,aCsDNE,E,iLA3CP,OACA,yBAAKH,UAAU,cACf,kBAAC,IAAD,KACU,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,eACZ,4BACE,kBAAC,IAAD,CAAMI,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,YAEF,4BACE,uBAAGC,KAAK,aAAaC,OAAO,UAA5B,YAWJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,CAAeC,MAAM,UAEvB,kBAAC,IAAD,CAAOD,KAAK,UACV,kBAAC,EAAD,CAAeC,MAAM,WAEvB,kBAAC,IAAD,CAAOD,KAAK,YACV,kBAAC,EAAD,CAAeC,MAAM,qB,GApCxBR,aCaNS,MAhBf,WAEE,OAEE,yBAAKV,UAAU,eAEX,kBAAC,EAAD,CAAQA,UAAU,eAKlB,kBAAC,EAAD,CAAQA,UAAU,iBCPNW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d9807e4e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\r\n\r\nclass ContentLayout extends Component {\r\n    render() {\r\n        return (\r\n        <div className=\"app-contentLayout\">\r\n            <p>\r\n                Come back later.\r\n            </p>\r\n        </div>\r\n        );\r\n    }\r\n}\r\nexport default ContentLayout;\r\n","import React, { Component } from 'react';\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n        <div className=\"app-footer\">\r\n\r\n        </div>\r\n        );\r\n    }\r\n}\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport '../css/header.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport ContentLayout from './ContentLayout';\r\nimport Footer from './Footer';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n        <div className=\"app-header\">\r\n        <Router>\r\n                  <div className=\"navbar-wrapper\">\r\n                    <ul className=\"navbar-list\">\r\n                      <li>\r\n                        <Link to=\"/\">Home</Link>\r\n                      </li>\r\n                      <li>\r\n                        <Link to=\"/about\">About</Link>\r\n                      </li>\r\n                      <li>\r\n                        <Link to=\"/contact\">Contact</Link>\r\n                      </li>\r\n                      <li>\r\n                        <a href=\"Resume.pdf\" target=\"_blank\">Resume</a>\r\n                      </li>\r\n                    </ul>\r\n\r\n                    {/*\r\n                      A <Switch> looks through all its children <Route>\r\n                      elements and renders the first one whose path\r\n                      matches the current URL. Use a <Switch> any time\r\n                      you have multiple routes, but you want only one\r\n                      of them to render at a time\r\n                    */}\r\n                    <Switch>\r\n                      <Route exact path=\"/\">\r\n                        <ContentLayout route=\"home\" />\r\n                      </Route>\r\n                      <Route path=\"/about\">\r\n                        <ContentLayout route=\"about\" />\r\n                      </Route>\r\n                      <Route path=\"/contact\">\r\n                        <ContentLayout route=\"contact\" />\r\n                      </Route>\r\n                    </Switch>\r\n                  </div>\r\n                </Router>\r\n        </div>\r\n        );\r\n    }\r\n}\r\nexport default Header;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './css/App.css';\r\nimport Header from './Component/Header'\r\nimport ContentLayout from './Component/ContentLayout'\r\nimport Footer from './Component/Footer'\r\n\r\n\r\nfunction App() {\r\n    var route = \"\";\r\n  return (\r\n\r\n    <div className=\"app-wrapper\">\r\n        {/* Begin Header*/}\r\n        <Header className=\"app-header\" />\r\n\r\n        {/* Begin ContentLayout*/}\r\n\r\n        {/* Begin Footer*/}\r\n        <Footer className=\"app-footer\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Experience from './Component/Experience';\r\nimport Contact from './Component/Contact';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}